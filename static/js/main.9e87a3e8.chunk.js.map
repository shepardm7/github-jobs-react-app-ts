{"version":3,"sources":["useFetchJobs.ts","job.tsx","JobsPagination.tsx","SearchForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_URL","reducer","state","action","type","loading","jobs","hasNextPage","payload","error","JobComp","job","useState","open","setOpen","Card","className","Body","Title","title","company","Subtitle","Date","created_at","toLocaleDateString","Badge","variant","location","style","wordBreak","source","how_to_apply","height","src","company_logo","undefined","alt","Text","Button","onClick","prevState","Collapse","in","description","JobsPagination","page","setPage","adjustPage","amount","prevPage","Pagination","Prev","Item","Ellipsis","active","Next","SearchForm","params","onParamChange","Form","Row","Group","as","Col","Label","Control","onChange","value","name","xs","Check","full_time","id","label","App","setParams","useReducer","dispatch","useEffect","cancelToken1","axios","CancelToken","cancelToken2","get","cancelToken","token","markdown","then","res","data","catch","e","isCancel","length","cancel","useFetchJobs","Container","target","param","prevParams","map","key","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.9e87a3e8.chunk.js","sourcesContent":["import {useEffect, useReducer} from \"react\";\r\nimport axios, {AxiosResponse} from \"axios\";\r\nimport Job from \"./models/Job\";\r\n\r\ninterface ActionMakeRequest {\r\n  type: 'make-request';\r\n}\r\n\r\ninterface ActionGetData {\r\n  type: 'get-data';\r\n  payload: { jobs: Job[] };\r\n}\r\n\r\ninterface ActionError {\r\n  type: 'error';\r\n  payload: { error: any };\r\n}\r\n\r\ninterface ActionUpdateHasNextPage {\r\n  type: 'update-has-next-page';\r\n  payload: { hasNextPage: boolean };\r\n}\r\n\r\ntype ActionTypes = ActionMakeRequest | ActionGetData | ActionError | ActionUpdateHasNextPage;\r\n\r\nconst BASE_URL = `${process.env.NODE_ENV === 'development' ? 'https://thingproxy.freeboard.io/fetch/' : 'https://cors-anywhere.herokuapp.com/'}https://jobs.github.com/positions.json/`;\r\n\r\ntype StateType = {\r\n  jobs: Job[];\r\n  loading: boolean;\r\n  hasNextPage: boolean;\r\n  error?: any;\r\n}\r\n\r\nfunction reducer(state: StateType, action: ActionTypes) {\r\n  switch (action.type) {\r\n    case \"make-request\":\r\n      return {loading: true, jobs: [], hasNextPage: false};\r\n    case \"get-data\":\r\n      return {...state, loading: false, jobs: action.payload.jobs};\r\n    case \"error\":\r\n      return {...state, loading: false, error: action.payload.error, jobs: []}\r\n    case \"update-has-next-page\":\r\n      return {...state, hasNextPage: action.payload.hasNextPage};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default function useFetchJobs(page: number, params?: { [key: string]: any }): StateType {\r\n  const [state, dispatch] = useReducer(reducer, {jobs: [], loading: true, hasNextPage: false});\r\n\r\n  useEffect(() => {\r\n    const cancelToken1 = axios.CancelToken.source();\r\n    const cancelToken2 = axios.CancelToken.source();\r\n    dispatch({type: \"make-request\"});\r\n    axios.get(BASE_URL, {\r\n      cancelToken: cancelToken1.token,\r\n      params: {markdown: true, page: page, ...params}\r\n    }).then((res: AxiosResponse<Job[]>) => {\r\n      dispatch({type: \"get-data\", payload: {jobs: res.data}})\r\n    }).catch(e => {\r\n      if (axios.isCancel(e)) return;\r\n      dispatch({type: \"error\", payload: {error: e}});\r\n    });\r\n\r\n    axios.get(BASE_URL, {\r\n      cancelToken: cancelToken2.token,\r\n      params: {markdown: true, page: page + 1, ...params}\r\n    }).then((res: AxiosResponse<Job[]>) => {\r\n      dispatch({type: \"update-has-next-page\", payload: {hasNextPage: res.data.length !== 0}})\r\n    }).catch(e => {\r\n      if (axios.isCancel(e)) return;\r\n      dispatch({type: \"error\", payload: {error: e}});\r\n    });\r\n\r\n    return () => {\r\n      cancelToken1.cancel();\r\n      cancelToken2.cancel();\r\n    }\r\n  }, [params, page]);\r\n\r\n  return state;\r\n}\r\n","import React, {useState} from 'react';\r\nimport Job from \"./models/Job\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport Card from 'react-bootstrap/Card';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Collapse from 'react-bootstrap/Collapse';\r\n\r\ntype JobProps = {\r\n  job: Job;\r\n}\r\n\r\nexport default function JobComp({job}: JobProps) {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <Card className=\"mb-3\">\r\n      <Card.Body>\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div>\r\n            <Card.Title>\r\n              {job.title} - <span className=\"text-muted font-weight-light\">{job.company}</span>\r\n            </Card.Title>\r\n            <Card.Subtitle className=\"text-muted mb-2\">\r\n              {new Date(job.created_at).toLocaleDateString()}\r\n            </Card.Subtitle>\r\n            <Badge variant=\"secondary\" className=\"mr-2\">{job.type}</Badge>\r\n            <Badge variant=\"secondary\">{job.location}</Badge>\r\n            <div style={{wordBreak: \"break-all\"}}>\r\n              <ReactMarkdown source={job.how_to_apply}/>\r\n            </div>\r\n          </div>\r\n          <img className=\"d-none d-md-block\" height=\"50\" src={job.company_logo || undefined} alt={job.company}/>\r\n        </div>\r\n        <Card.Text>\r\n          <Button onClick={() => setOpen(prevState => !prevState)}\r\n                  variant=\"primary\">{open ? 'Hide Details' : `View Details`}</Button>\r\n        </Card.Text>\r\n        <Collapse in={open}>\r\n          <div className=\"mt-4\">\r\n            <ReactMarkdown source={job.description}/>\r\n          </div>\r\n        </Collapse>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n","import React, {Dispatch, SetStateAction} from 'react';\r\nimport Pagination from 'react-bootstrap/Pagination';\r\n\r\ntype JobsPaginationProps = {\r\n  page: number;\r\n  setPage: Dispatch<SetStateAction<number>>;\r\n  hasNextPage: boolean;\r\n}\r\n\r\nexport default function JobsPagination({page, setPage, hasNextPage}: JobsPaginationProps) {\r\n  function adjustPage(amount: number) {\r\n    setPage((prevPage: number) => prevPage + amount);\r\n  }\r\n\r\n  return (\r\n    <Pagination>\r\n      {page !== 1 && <Pagination.Prev onClick={() => adjustPage(-1)}/>}\r\n      {page !== 1 && <Pagination.Item onClick={() => adjustPage(1)}>1</Pagination.Item>}\r\n      {page > 2 && <Pagination.Ellipsis/>}\r\n      {page > 2 && <Pagination.Item onClick={() => adjustPage(-1)}>{page - 1}</Pagination.Item>}\r\n      <Pagination.Item active>{page}</Pagination.Item>\r\n      {hasNextPage && <Pagination.Item onClick={() => adjustPage(1)}>{page + 1}</Pagination.Item>}\r\n      {hasNextPage && <Pagination.Next onClick={() => adjustPage(1)}/>}\r\n    </Pagination>\r\n  )\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nexport type SearchParams = {\r\n  description: string;\r\n  location: string;\r\n  full_time: boolean;\r\n}\r\n\r\ntype SearchFormProps = {\r\n  params: { [key: string]: any };\r\n  onParamChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport default function SearchForm({params, onParamChange}: SearchFormProps) {\r\n  return (\r\n    <Form className=\"mb-4\">\r\n      <Form.Row className=\"align-items-end\">\r\n        <Form.Group as={Col}>\r\n          <Form.Label>Description</Form.Label>\r\n          <Form.Control onChange={onParamChange} value={params.description} name=\"description\" type=\"text\"/>\r\n        </Form.Group>\r\n        <Form.Group as={Col}>\r\n          <Form.Label>Location</Form.Label>\r\n          <Form.Control onChange={onParamChange} value={params.location} name=\"location\" type=\"text\"/>\r\n        </Form.Group>\r\n        <Form.Group as={Col} xs=\"auto\" className=\"ml-2\">\r\n          <Form.Check onChange={onParamChange} value={params.full_time} name=\"full_time\" id=\"full-time\"\r\n                      label=\"Only Full Time\" type=\"checkbox\" className=\"mb-2\"/>\r\n        </Form.Group>\r\n      </Form.Row>\r\n    </Form>\r\n  )\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\nimport useFetchJobs from \"./useFetchJobs\";\nimport JobComp from \"./job\";\nimport JobsPagination from \"./JobsPagination\";\nimport SearchForm, {SearchParams} from \"./SearchForm\";\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n  const [params, setParams] = useState<SearchParams>({description: '', location: '', full_time: false});\n  const [page, setPage] = useState(1);\n  const {jobs, loading, error, hasNextPage} = useFetchJobs(page, params);\n\n  function handleParamChange(e: ChangeEvent<HTMLInputElement>) {\n    const {name: param, value} = e.target;\n    setPage(1);\n    setParams(prevParams => {\n      return {...prevParams, [param]: value};\n    });\n  }\n\n  return (\n    <Container className=\"my-4\">\n      <h1 className=\"mb-4\">GitHub Jobs</h1>\n      <SearchForm params={params} onParamChange={handleParamChange}/>\n      <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage}/>\n      {loading && <h1>Loading...</h1>}\n      {error && <h1>Error. Try Refreshing.</h1>}\n      {jobs.map(job => {\n        return <JobComp key={job.id} job={job}/>\n      })}\n      <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage}/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}